// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectDummy.Models;

#nullable disable

namespace ProjectDummy.Migrations
{
    [DbContext(typeof(FptclubsContext))]
    partial class FptclubsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectDummy.Models.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("club_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubId"));

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("club_name");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("ClubId")
                        .HasName("PK__Clubs__BCAD3DD9E76837C6");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("ProjectDummy.Models.ClubMember", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("membership_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"));

                    b.Property<int>("ClubId")
                        .HasColumnType("int")
                        .HasColumnName("club_id");

                    b.Property<DateTime?>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("joined_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("MembershipId")
                        .HasName("PK__ClubMemb__CAE49DDD6EBE5379");

                    b.HasIndex("ClubId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("ClubMembers");
                });

            modelBuilder.Entity("ProjectDummy.Models.ClubRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("club_name");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("RequestId")
                        .HasName("PK__ClubRequ__18D3B90F642177DA");

                    b.HasIndex("UserId");

                    b.ToTable("ClubRequests");
                });

            modelBuilder.Entity("ProjectDummy.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime")
                        .HasColumnName("event_date");

                    b.Property<string>("EventDescription")
                        .HasColumnType("text")
                        .HasColumnName("event_description");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("event_title");

                    b.HasKey("EventId")
                        .HasName("PK__Events__2370F727D6C1A214");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ProjectDummy.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__E059842FE2370968");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ProjectDummy.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.HasKey("PostId")
                        .HasName("PK__Posts__3ED78766A395B13D");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ProjectDummy.Models.PostInteraction", b =>
                {
                    b.Property<int>("InteractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("interaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InteractionId"));

                    b.Property<string>("CommentText")
                        .HasColumnType("text")
                        .HasColumnName("comment_text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("InteractionId")
                        .HasName("PK__PostInte__605F8FE626355413");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostInteractions");
                });

            modelBuilder.Entity("ProjectDummy.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__760965CC319BD705");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Roles__783254B1D499B73A")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ProjectDummy.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("due_date");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("task_description");

                    b.HasKey("TaskId")
                        .HasName("PK__Tasks__0492148DB46F1696");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ProjectDummy.Models.TaskAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assignment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<DateTime?>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assigned_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("MembershipId")
                        .HasColumnType("int")
                        .HasColumnName("membership_id");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.HasKey("AssignmentId")
                        .HasName("PK__TaskAssi__DA8918149E9E4CAB");

                    b.HasIndex("MembershipId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAssignments");
                });

            modelBuilder.Entity("ProjectDummy.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("profile_picture");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__Users__B9BE370F995A7F0D");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E6164897924D5")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__Users__F3DBC57250E7F37C")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProjectDummy.Models.ClubMember", b =>
                {
                    b.HasOne("ProjectDummy.Models.Club", "Club")
                        .WithMany("ClubMembers")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ClubMembe__club___4316F928");

                    b.HasOne("ProjectDummy.Models.Role", "Role")
                        .WithMany("ClubMembers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ClubMembe__role___44FF419A");

                    b.HasOne("ProjectDummy.Models.User", "User")
                        .WithMany("ClubMembers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ClubMembe__user___440B1D61");

                    b.Navigation("Club");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectDummy.Models.ClubRequest", b =>
                {
                    b.HasOne("ProjectDummy.Models.User", "User")
                        .WithMany("ClubRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ClubReque__user___656C112C");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectDummy.Models.Event", b =>
                {
                    b.HasOne("ProjectDummy.Models.ClubMember", "CreatedByNavigation")
                        .WithMany("Events")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Events__created___52593CB8");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("ProjectDummy.Models.Notification", b =>
                {
                    b.HasOne("ProjectDummy.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__user___60A75C0F");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectDummy.Models.Post", b =>
                {
                    b.HasOne("ProjectDummy.Models.ClubMember", "CreatedByNavigation")
                        .WithMany("Posts")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Posts__created_b__49C3F6B7");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("ProjectDummy.Models.PostInteraction", b =>
                {
                    b.HasOne("ProjectDummy.Models.Post", "Post")
                        .WithMany("PostInteractions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__PostInter__post___4D94879B");

                    b.HasOne("ProjectDummy.Models.User", "User")
                        .WithMany("PostInteractions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__PostInter__user___4E88ABD4");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectDummy.Models.Task", b =>
                {
                    b.HasOne("ProjectDummy.Models.ClubMember", "CreatedByNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Tasks__created_b__571DF1D5");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("ProjectDummy.Models.TaskAssignment", b =>
                {
                    b.HasOne("ProjectDummy.Models.ClubMember", "Membership")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("MembershipId")
                        .IsRequired()
                        .HasConstraintName("FK__TaskAssig__membe__5BE2A6F2");

                    b.HasOne("ProjectDummy.Models.Task", "Task")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TaskAssig__task___5AEE82B9");

                    b.Navigation("Membership");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ProjectDummy.Models.Club", b =>
                {
                    b.Navigation("ClubMembers");
                });

            modelBuilder.Entity("ProjectDummy.Models.ClubMember", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Posts");

                    b.Navigation("TaskAssignments");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ProjectDummy.Models.Post", b =>
                {
                    b.Navigation("PostInteractions");
                });

            modelBuilder.Entity("ProjectDummy.Models.Role", b =>
                {
                    b.Navigation("ClubMembers");
                });

            modelBuilder.Entity("ProjectDummy.Models.Task", b =>
                {
                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("ProjectDummy.Models.User", b =>
                {
                    b.Navigation("ClubMembers");

                    b.Navigation("ClubRequests");

                    b.Navigation("Notifications");

                    b.Navigation("PostInteractions");
                });
#pragma warning restore 612, 618
        }
    }
}
